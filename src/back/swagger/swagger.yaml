swagger: '2.0'
info:
  description: "This is the swagger file which describe every transactions between BACK-END and FRONT-END.\nThis aims to describes in depth objects that are used in AdopteUnChef application"
  version: '1.0.0'
  title: 'Swagger AdopteUnChef'
host: 'localhost:4000'

paths:
  /:
    get:
      description: Use it to see home page !
      responses:
        '200':
          description: a single string is returned

  /api/db/users/:
    get:
      description: Use to get all users from BDD
      responses:
        '200':
          description: a json is returned
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 'Invalid status value'
  
  /api/db/users/register:
    post:
      summary: Creates a new user.
      consumes:
        - application/json
      parameters:
        - in: body
          name: name
          description: The user to create.
          schema:
            type: object
            required:
              - username
              - email
              - password
            properties:
              username:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        201:
          description: User was created successfully
  
  /api/db/users/signin:
    post:
      summary: Connect to user.
      consumes:
        - application/json
      parameters:
        - in: body
          name: name
          description: The user to connect.
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        200:
          description: Account connected
  
  /api/db/tags/:
    get:
      description: Use to get list of tags from BDD
      responses:
        '200':
          description: a json is returned
          schema:
            $ref: '#/definitions/Tags'
        '400':
          description: 'Invalid status value'
  
  /api/db/tags/addTag:
    post:
      summary: Add tag to db.
      consumes:
        - application/json
      parameters:
        - in: body
          name: name
          description: The tag to insert.
          schema:
            type: object
            required:
              - tag
            properties:
              tag:
                type: string
      responses:
        200:
          description: Tag inserted

  /api/db/tags/delete:
    post:
      summary: Delete tag from db.
      consumes:
        - application/json
      parameters:
        - in: body
          name: name
          description: The tag to delete.
          schema:
            type: object
            required:
              - tag
            properties:
              tag:
                type: string
      responses:
        200:
          description: Tag deleted

  /api/db/tags/addUserTags:
    post:
      summary: Add tag to user.
      consumes:
        - application/json
      parameters:
        - in: body
          name: name
          description: The tags to insert.
          schema:
            type: object
            required:
              - id_user
              - tags
            properties:
              id_user:
                type: integer
              tags:
                type: string
      responses:
        200:
          description: Tag inserted for user

  /api/db/tags/deleteUserTags:
    post:
      summary: Delete tag to user.
      consumes:
        - application/json
      parameters:
        - in: body
          name: name
          description: The tags to delete.
          schema:
            type: object
            required:
              - id_user
              - id_tags
            properties:
              id_user:
                type: integer
              id_tags:
                type: integer
      responses:
        200:
          description: Tag deleted for user

  /api/db/tags/users:
    post:
      summary: Get tags from user.
      consumes:
        - application/json
      parameters:
        - in: body
          name: name
          description: The user to get tags.
          schema:
            type: object
            required:
              - id_user
            properties:
              id_user:
                type: integer
      responses:
        200:
          description: Done
  
  /api/db/publications/:
    get:
      description: Use to get list of publications from BDD
      responses:
        '200':
          description: a json is returned
          schema:
            $ref: '#/definitions/Publication'
        '400':
          description: 'Invalid status value'
  
  /api/db/publications/addPublication:
    post:
      summary: Add publication to db.
      consumes:
        - application/json
      parameters:
        - in: body
          name: name
          description: The tag to insert.
          schema:
            type: object
            required:
              - title
              - description
              - image
              - id_user
            properties:
              title:
                type: string
              description:
                type: string
              image:
                type: string
              id_user:
                type: integer
      responses:
        200:
          description: Publication inserted
  
  /api/db/publications/users:
    post:
      summary: Get publications from user.
      consumes:
        - application/json
      parameters:
        - in: body
          name: name
          description: The user to get tags.
          schema:
            type: object
            required:
              - id_user
            properties:
              id_user:
                type: integer
      responses:
        200:
          description: Done

definitions:
  User:
    type: object
    properties:
      username:
        type: string
        example: Didier
      email:
        type: string
        example: 'Didier@laposte.net'
      password:
        type: string
        example: 'azerty123'
  Tags:
    type: object
    properties:
      id:
        type: integer
        example: 1
      tag:
        type: string
        example: ["Africain", "Français"]
  Publication:
    type: object
    properties:
      title:
        type: string
        example: Les vacances de Didier
      date:
        type: datetime
        example: '10/03/2021'
      description:
        type: string
        example: 'Sacré Didier'
      image:
        type: string
        example: 'vacances.jpeg'
      likes:
        type: integer
        example: 666
      dislikes:
        type: integer
        example: 1
      comments:
        type: string
        example: 'Ceci est un commentaire'